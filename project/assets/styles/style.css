html, body { /*Необходимо изменить некоторые параметры по всему документу.*/

    margin: 0; /*В начале, перед тем, как работать, у страницы есть белая рамка вокруг. Её необходимо убрать. Для этого
    обнуляем внешние отступы по всем сторонам*/

    padding: 0;/*А также внутренние отступы. Теперь у нас все элементы прижаты к левому верхнему краю, это нормально*/

    font-family: "Poppins", sans-serif; /*Здесь указываем семью шрифтов по всему документу, поскольку он не меняется*/
}

/*Шапка (хэдэр, навигационная панель) сайта---------------------------------------------------------------------------*/

header { /*Меняем шапку сайта*/

    margin-top: 25px; /*Делаем для неё отступ сверху*/

    display: flex; /*Все её элементы внутри расставляем по горизонтали (изначально по вертикали)*/

    align-items: center;/*Выравниваем все элементы внутри относительно центра друг друга*/

    justify-content: space-between;/*Поскольку элементы прижаты к одному краю, необходимо как-то заполнить правую пустую
    область. Для этого с помощью данного параметра и значения мы растягиваем все элементы по всей ширине области, в которой
    они находятся*/
}

.container { /*Та самая область, о которой говорилось выше в justify-content. Но может быть и другая, просто данный
товарищ ставит ограничение в области отображения элементов*/

    width: 1200px; /*Его длина. Высоту указывать не обязательно, она сама увеличивается с увеличением количества элементов
    внутри него*/

    margin: 0 auto; /*Тут мы выравниваем этот контейнер по центру. Дословно означает следующее: сверху и снизу для
    контейнера внешние отступы мы обнуляем, а слева и справа отдаём честь CSS, чтобы он автоматически сделал нам отступы.
    Он просто ставит одинаковые отступы по бокам, из-за этого объект распологается  по середине*/
    box-sizing: content-box;
}

.logo { /*Общий класс логотипа*/

    display: flex; /*Отображаем по горизонтали*/

    align-items: center;/*Выравниваем по центру друг относительно друга*/
}

.logo img { /*В логотипе меняем картинку*/

    margin-right: 15px;/*Ну тут в целом просто делаем справа отступ от картинки, чтобы потом текст не был прижат
    слишком сильносправа*/
}

.logo p { /*В логотипе меняем текст*/

    font-size: 22px; /*Размер шрифта*/

    font-weight: 600; /*Жирнота шрифта, значение этого параметра может быть словами (bold, lighter и тд), либо цифрами
    (300, 400, 500 и тд). Сами цифры определяются ещё при импорте шрифтов (можете глянуть в fonts.css и увидеть
    в строке цифры 400 и 600). Рекомендуется использовать цифровые варианты жирноты, поскольку они более обширные и гибкие
    в плане значений. Если будете брать цифровые значения, не предусмотренные вашим импортированнным, он будет брать
    ближайшие к этому большие или меньшие значения. Например если у вас есть только максимум 400, но вы ставите 500,
    вам сбросит до 400 автоматом. И если у вас есть только минимум 300, но вы ставите 200, он поставит 300*/
}

.links a{ /*Редактируем ссылки в общей группе ссылок*/

    font-size: 14px;

    text-decoration: none;/*Убираем нижнее подчёркивание*/

    color: #5C5555; /*Задаём цвет тексту ссылок*/

    margin-left: 100px; /*Каждым из них делаем левый отступ*/

    font-weight: 600; /*Ну и жирноту указываем*/
}

.links a:first-child { /*Псевдокласс "первый-ребёнок" для группы ссылок. Дословно означает, что все параметры ниже
будут применены только к первому элементу группы. Такую махинацию можно сделать только в том случае, если у вас
элементы входят в состав общей группы. Для независимых элементов такое провернуть не получится*/

    color: #FF5202; /*Ну тут для первой ссылки меняем цвет*/
}

.sign_up { /*Класс кнопки регистрации*/

    margin-left: 100px;/*Сделаем отступ слева для неё, чтобы не прижималась к панели ссылок*/
}

.sign_up a { /*Редактируем в классе конкретно элемент ссылки*/
    font-size: 14px; /*Размер шрифта*/
    border: 2px solid #000000; /*Рамка вокруг элемента. 2px - ширина рамки, solid - рамка будет сплошная,
    #000000 - шестнадцатиричный код цвета (можно и словами, но лучше так).*/

    padding: 15px 35px; /*Внутренние отступы (между рамкой и текстом ссылки). 15px сверху снизу и 35px слева и справа.*/

    text-decoration: none; /*Убираем нижнее подчёркивание*/

    color: #000000; /*Задаём цвет тексту ссылки*/

    font-weight: 600; /*Ну и жирноту указываем*/
}

/*Основной блок сайта-------------------------------------------------------------------------------------------------*/
.text_block h1{ /*Заголовок текстового блока (большие жирные буквы)*/

    font-size: 62px; /*Размер шрифта*/

    line-height: 80px; /*Междустрочный интервал текста (отступ между строками)*/
}

.text_block p { /*Блок текста (маленькие буквы)*/

    font-size: 20px; /*Размер шрифта*/

    border-left: 2px solid #1A1A1A;/*Рамка вокруг элемента. НО! Из этой рамки взяли только левую полоску.
    Обрезали так сказать. 2px - ширина рамки, solid - рамка будет сплошная, #1A1A1A - шестнадцатиричный код цвета
    (можно и словами, но лучше так)*/

    padding: 10px 20px; /*Внутренние отступы (между рамкой и текстом ссылки). 10px сверху снизу и 20px слева и справа.
    В данном случае значения сверху и справа будут задавать нам длину этой полоски слева, поскольку она зависит от
    внутренних отступов*/

    margin-top: -20px; /*Делаем отступ сверху элемента, сдвигая его вниз. Но, из-за того, что число отрицательное,
    то получается так, что оно наоборот движется вверх, как будто его снизу что-то выталкивает. Так сказать, циферная альтернатива
    margin-bottom. Но не нужно брать себе привычку так делать всегда. Это лишь на тот случай, когда другими параметрами не
    получается выровнять элемент*/
}

.button_block a { /*Обращаемся к каждой кнопке внутри блока*/

    border: 1px solid #1A1A1A; /*Рамка вокруг элемента. 2px - ширина рамки, solid - рамка будет сплошная,
    #1A1A1A - шестнадцатиричный код цвета (можно и словами, но лучше так).*/

    padding: 15px 35px; /*Внутренние отступы (между рамкой и текстом ссылки). 15px сверху снизу и 35px слева и справа.*/

    text-decoration: none; /*Убираем нижнее подчёркивание*/

    font-weight: 600; /*Ну и жирноту указываем*/
}

.button_block { /*Для самого блока кнопок*/

    margin-top: 55px; /*Делаем сверху отступ, чтобы отлепить его от текста*/
}

.button_block a:first-child { /*Псевдокласс "первый-ребёнок" для группы кнопок. Дословно означает, что все параметры ниже
будут применены только к первому элементу группы. Такую махинацию можно сделать только в том случае, если у вас
элементы входят в состав общей группы. Для независимых элементов такое провернуть не получится.
Здесь мы задаём параметры конкретно для первой кнопки.*/

    background-color: #FF5202; /*Цвет самой кнопки*/
    border: 1px solid #FF5202; /*Цвет окантовки под стать самого цвета кнопки (а то чёрная полоска некрасивая)
    color: #ffffff; /*Цвет текста внутри кнопки*/
    margin-right: 20px;
    color: #ffffff;
}

.button_block a:last-child { /*Псевдокласс "последний-ребёнок" для группы кнопок. Дословно означает, что все параметры ниже
будут применены только к последнему элементу группы. Такую махинацию можно сделать только в том случае, если у вас
элементы входят в состав общей группы. Для независимых элементов такое провернуть не получится.
Здесь мы задаём параметры конкретно для второй кнопки.*/

    color: #000000; /*Меняем цвет текста кнопки*/
}

.main_block {

    margin-top: 100px; /*Делаем отступ сверху главного блока, чтобы отлепить его от шапки*/

    display: flex; /*Распологаем элементы внутри этого блока по горизонтали*/

    justify-content: space-between; /*Поскольку элементы прижаты к одному краю, необходимо как-то заполнить правую пустую
    область. Для этого с помощью данного параметра и значения мы растягиваем все элементы по всей ширине области, в которой
    они находятся*/
}

.man_image img {
    width: 500px; /*Меняем размер изображения*/
    margin-top: -25px; /*Немного приподнимем его вверх*/
}
/*Футер---------------------------------------------------------------------------------------------------------------*/

.bg { /*Цвет заднего фона (англ. background color)*/
    background-color: #262543; /*Ну собственно сам параметр*/
    margin-top: 100px; /*И чуть чуть блок и всё внутри него смещаем вниз*/
}

.footer { /*Футер, он же блок с завершающей или перенаправляющей информацией о сайте (как правило, там распологается
местоположение офисов, номера телефонов компании, контактные ссылки, а также дополнительная информация*/
    color: #ffffff; /*Цвет всего текста в блоке*/
    justify-content: space-between; /*Растягиваем элементы пол всей длине контейнера*/
    display: flex;/*Распологаем текстовый блок и блок с подблоками-иконками по горизонтали, но не сами подблоки*/
    align-items: center; /*Центрируем блоки относительно друг друга*/
    height: 100%; /*Высота футера*/
}

.footer_icon { /*Блок с иконочными подблоками*/
    display: flex; /*Расставляем подблоки (их 3) по горизонтали*/
    margin-top: 25px; /*немного смещаем его наверх, чтобы он был более отцентрован (на сайте по идее он как бы отцентрован,
    но этого не видно визуально из-за подгона отступов его центр немного смещён, поэтому выкручиваемся так) */
}

.footer_info h1 { /*В блоке с текстовой информацией (текст слева сайта) меняем параметры для заголовка*/
    font-size: 40px; /*Размер шрифта*/
    line-height: 50px; /*Междустрочный интервал*/
    margin-bottom: 20px; /*Тут делаем отступ сверху и снизу заголовка*/
}

.footer_info p { /*В блоке с текстовой информацией (текст слева сайта) меняем параметры для абзаца*/
    font-size: 20px; /*Размер шрифта*/
    line-height: 30px; /*Междустрочный интервал*/
    margin-top: -10px; /*Тут немного сближаем его с заголовком сверху*/
}

.icon_block { /*Тот самый подблок, состоящий из иконки, заголовка и текста*/
    margin-left: 75px; /*Каждому из эти подблоков делаем отступ слева, чтобы заполнить пустоту в футере и
    отодвинуть их друг от друга*/
}

.icon_block h1 { /*Заголовок подблока*/
    font-size: 22px; /*Размер шрифта*/
}

.icon_block p { /*Абзац подблока*/
    margin-top: -5px;  /*Чуть чуть приподнимем его к заголовку*/
    font-size: 16px; /*Размер шрифта*/
    line-height: 30px; /*Междустрочный интервал*/
}

.icon_block img { /*Рисунки внутри иконок*/
    padding: 15px; /*Внутренний отступ от рамки до изображения*/
    height: 25px; /*Высота изображения*/
    width: 25px; /*Длина изображения*/
    border-radius: 10px; /*Скругление рамок в углах. Больше значение - больше скругление.
    Можно в процентах, можно в пискелях. Для ориентира - 50% - превращает квадратную рамку в круг,
    значения больше ситуацию не меняют. В пикселях скругление зависит от размера рамки.*/
    margin-bottom: 10px; /*Отступ снизу изображения*/

}

.footer_icon .icon_block:first-child img { /*К изображению, находящееся в первом подблоке группы, применяем стиль*/
    background-color: #1CD7AF; /*Задний фон изображения*/
    border: 1px solid #1CD7AF; /*Окантовка рамки подстать самому фону*/
}

.footer_icon .icon_block:nth-child(2) img { /*nth-child (nth с английского "энный", тобишь N - любое число)
- параметр, который позволяет взять любой элемент из группы, указав ему соответсвующий номер самого элемента, или же
выражение, по которому он эти элементы будет отбирать. В данном случае мы выбираем изображение из 2 элемента icon_block
группы .footer_icon (подробнее можете почитать тут - https://developer.mozilla.org/ru/docs/Web/CSS/:nth-child)*/
    background-color: #FC5B11; /*Задний фон изображения*/
    border: 1px solid #FC5B11; /*Окантовка рамки подстать самому фону*/
}

.footer_icon .icon_block:last-child img { /*К изображению, находящееся в последнем подблоке icon_block группы footer_icon, применяем стиль*/
    background-color: #525BF1; /*Задний фон изображения*/
    border: 1px solid #525BF1; /*Окантовка рамки подстать самому фону*/
}

.navigation_icon {
    display: none;
}

.profile_avatar {
    display: none;
}

.mobile {
    display: none;
}

/*Мобильный адаптив (размеры 400х853, устройство среднего сегмента, отзывчивый размер)--------------------------------*/

@media screen and (max-width: 400px) {
    /*Медиа-запрос используются в тех случаях , когда нужно применить разные CSS-стили,
   для разных устройств по типу отображения (например: для принтера, монитора или смартфона), а также конкретных характеристик
   устройства (например: ширины окна просмотра браузера), или внешней среды (например: внешнее освещение). В нашем случае мы
   устанавливаем размер экрана (screen), под который будем адаптировать (в нашем случае 400px). Учтите, что некоторые браузеры
   (по типу яндекса) берут в расчёт только размеры сайтов, которые меньше заданного (то есть, если у вас адаптация должна быть
   максимум под 400px, необходимо взять хотя бы 401, потому что он работает по принципу МЕНЬШЕ, а не МЕНЬШЕ ИЛИ РАВНО).
   Если не соблюдать это правило, стили медиазапроса не сработают.*/
    .container { /* Меняем размер контейнера для мобилки*/
        /*border: 1px solid black;*/
        width: 340px; /*Он также, как и на комп. версии будет меньше размера самого экрана, поэтому смотрим на глаз*/
        margin: 25px auto 0 auto; /*Внешний отступ сверху, автоматические по бокам и 0 снизу, чтобы не было белой полоски*/
    }

    .logo p { /*Подгоняем размер текста логотипа под мобилку*/
        font-size: 15px;
    }

    .logo img { /*Ну и размер иконки логотипа. Также чуть уменьшим правый отступ, чтобы текст чуть ближе был к иконке*/
        width: 22px;
        margin-right: 10px;
    }


    .links { /*Убираем блок навигационной панели, вместо неё будет соответствующая иконка слева*/
        display: none; /*display none скрывает нужный нам элемент*/
    }

    .sign_up { /*Убираем кнопку регистрации, вместо неё будет аватарка справа*/
        display: none;
    }

    header { /*у шапки удаляем отступы со всех сторон, отступы нам уже задал контейнер. Так они не будут накладываться друг на друга*/
        margin: 0;
    }

    header p { /*Обнуляем отступы у текста иконки, в комп. макете они слишком большие и накладываются на отступы контейнера.*/
        margin: 0;
    }

    .navigation_icon { /*Теперь отобразим иконку нав. панели (она будет слева вместо обычной)*/
        display: block;
        /*display block зачастую используют для того, чтобы какие-либо элементы отобразить по вертикали.
               Но с его помощью можно также отобразить элементы, которые были скрыты display none*/
    }

    .profile_avatar { /*Такая же ситуация, что и с нав. иконкой, только уже с аватаркой справа*/
        display: block;
    }

    .main_block {
        display: block; /*Элементы внутри главного блока расположим по вертикали, посколько от нас это требует макет*/
        margin-top: 50px; /*Немного увеличим отступ сверху*/
    }

    .text_block h1 { /*Задаём размер шрифта и междустрочный интервал заголовку главного блока*/
        font-size: 35px;
        line-height: 50px;
    }

    .text_block p {
        font-size: 14px; /*Задаём размер шрифта*/

        padding: 10px; /*Внутренний отступ со всех сторон для рамки, чтобы текст был отлиплен от границы*/

        line-height: 25px; /*Междустрочный интервал*/

        margin-top: 10px; /*Отлепляем его от заголовка сверху*/

        border-left: 1px solid #000000; /*Цвет и тип рамки*/
    }

    .main_block .man_image img {
        margin: 0 auto; /*Центирируем изображение по центру, оно изначально почему то слева*/

        display: block;
        /*Также делаем его по вертикали. /*Вы спросите зачем? Не знаю, он и так по факту по вертикали,
               но без него ничего не работает, методом перебора просто поставил*/

        width: 350px;
        /*Объясняю как раз, почему на уроке был кривой контейнер. Всё из за изображения, а точнее из за его размера
               Оно ломало структуру контейнера тем, что выходило за рамки, из за этого было такое странное поведение. Долго думал в чём причина,
               всё оказалось гораздо проще. Оно изначально было больше размером, поэтому сделал его адекватным*/
    }

    .button_block {
        /* У нас блок кнопок (ссылок) - это по факту тот же текст, что мы видим, только может переносить нас по ссылкам.
           У него есть очень удобный параметр text-aligh, который может спокойно выровнять текст относительно своей области нахождения (в нашем случае - контейнер).
           В отличие от aligh-items он центрирует блок относительно центра области, а не рядом стоящих с ним с ним элементов. Другими словами
           может, например, поставить текст по середине страницы/контейнера. Удобно, но к сожалению только для текста. */

        text-align: center;
    }

    .button_block a { /* Ну тут меняем размер текста кнопок*/
        font-size: 15px;
    }

    .comp { /*Блок кнопок для комп. версии убираем*/
        display: none;
    }

    .mobile { /*Блок кнопок для мобильной версии отображаем*/
        display: block;
    }

    .bg { /*Немного увеличиваем отступ сверху заднего фона футера*/
        margin-top: 75px;
    }

    .footer {
        text-align: center; /*Весь текст в футере в макете у нас отцентрирован по центру контейнера, поэтому используем уже известный вам text-align: center*/

        display: block; /*Блок текста и блок иконочных подблоков располагаем по вертикали*/

        padding: 30px;
        /*Немного увеличиваем отступ по всем позициям. Почему padding? Для того, чтобы отдалить немного
               элементы внутри футера от границы, потому что через margin он эти отступы делает весьма криво, а именно делает сверху
               и снизу ужасные отступы, которые в принципе выходят за рамки заднего фона. Из за этого вы потом можете увидеть белую полоску снизу*/
    }

    .footer_info h1 { /*Указываем размер для заголовка текстового блока футера*/
        font-size: 26px;
    }

    .footer_info p { /*Указываем размер для абзаца текстового блока футера*/
        font-size: 15px;
    }

    .footer_icon { /*Элементы внутри общей группы иконочных подблоков располагаем по вертикали*/
        display: block;
    }

    .icon_block {
        /*Каждому иконочному подблоку мы делаем отступы сверху и снизу, чтобы они отлипли друг от друга,
           при этом бока не меняем*/
        margin: 50px 0;
    }

    .icon_block h1 { /*Указываем размер для заголовка текстового блока футера, а также отступы по всем сторонам для него*/
        font-size: 21px;
        margin: 10px;
    }

    .icon_block p { /*Указываем размер для абзаца текстового блока футера, а также междустрочный интервал*/
        font-size: 13px;
        line-height: 25px;
    }
}
.bg{
    background-color: #FF5202;
}